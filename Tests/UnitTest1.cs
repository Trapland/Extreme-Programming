using App; // додати залежність (Dependencies - Project Reference) від проєкту App
namespace Tests
{
    [TestClass]
    public class UnitTestApp
    {
        private static Dictionary<String, int> parseTests = new()
        {
            {"I"          , 1 },
            {"II"         , 2 },
            {"III"        , 3 },
            {"IIII"       , 4 }, // Особливі твердження - з них ми визначаємо про
            {"IV"         , 4 }, // підтримку неоптимальних записів чисел
            {"V"          , 5 },
            {"VI"         , 6 },
            {"VII"        , 7 },
            {"VIII"       , 8 },
            {"IX"         , 9 },
            { "X"         , 10 },
            { "VV"        , 10 }, // ще одне наголошення неоптимальності
            { "IIIIIIIIII", 10 }, // ще одне наголошення неоптимальності
            { "VX"        , 5 }, // ще одне наголошення неоптимальності
            { "N"         , 0 }, // доповнюємо множину чисел нулем
            { "-L"        , -50 }, // вказуємо, що можливі від'ємні числа
            { "-XL"       , -40 },
            { "-IL"       , -49 }, // неоптимальностість
            { "C"         , 100 },
            { "D"         , 500 },
            { "M"         , 1000 },
            { "CCCC"      , 400 },
            { "XD"        , 490 },
            { "LM"        , 950 },
            { "CDX"       , 410 },
            { "DDD"       , 1500 },
            { "VM"        , 995 },
            { "MDCC"      , 1700 },
            { "DDDIV"     , 1504 },
            { "MMMM"      , 4000 },
            {"LX"         , 60 },
            {"LXII"       , 62 },
            {"CCL"        , 250 },
            {"-CCIII"     , -203 },
            {"-LIV"       , -54},
            {"MDII"       , 1502 },
            { "-D"        , -500 },
            { "-C"        , -100 },
            { "-M"        , -1000 },
            { "IM"        , 999 },
            { "-IM"       , -999 },
            { "IC"        , 99 },
            { "-IC"       , -99 },
            { "ID"        , 499 },
            { "-ID"       , -499 },
            { "-VM"       , -995 },
            { "VC"        , 95 },
            { "-VC"       , -95 },
            { "VD"        , 495 },
            { "-VD"       , -495 },
            { "XM"        , 990 },
            { "-XM"       , -990 },
            { "XC"        , 90 },
            { "-XC"       , -90 },
            { "-XD"       , -490 },
            { "MI"        , 1001 },
            { "-MI"       , -1001 },
            { "CI"        , 101 },
            { "-CI"       , -101 },
            { "DI"        , 501 },
            { "-DI"       , -501 },
            { "MV"        , 1005 },
            { "-MV"       , -1005 },
            { "CV"        , 105 },
            { "-CV"       , -105 },
            { "DV"        , 505 },
            { "-DV"       , -505 },
            { "MX"        , 1010 },
            { "-MX"       , -1010 },
            { "CX"        , 110 },
            { "-CX"       , -110 },
            { "DX"        , 510 },
            { "-DX"       , -510 },
            { "CMD"       , 1400 },
            { "CLI"       , 151},
            { "LID"       , 549},
            { "DID"       , 999},
            { "DMC"       , 600},
            {"MMXXIII"    , 2023},
            {"CDIV"       , 404},
            {"CDXXXXIV"       , 444},
            {"DXXXXV"       , 545},
            {"DVVV"       , 515},
            {"CVIIIII"       , 110},
            {"DVD"       , 995},
            {"DDDD"       , 2000},
            {"XXXXXX"       , 60},
            {"IXIXIXIX"       , 36},
            {"ILIL"       , 98},
            {"XLX"       , 50},
            {"LC"       , 50},
            {"CCCCC"       , 500},
            {"ICI"       , 100},
            {"XCX"       , 100},
            {"XDX"       , 500},
            {"XMX"       , 1000},
            {"XXVV"       , 30},
            {"LLLLL"       , 250},
            {"XXXXXXXIIIIIII"       , 77},
            {"DXXXX"       , 540},
            {"DIIIII"       , 505},
        };

        [TestMethod]
        public void TestRomanNumberParse()
        {
            Assert.AreEqual(                   // RomanNumber.Parse("I").Value == 1
                1,                             // Значення, що очікується (що має бути, правильний варіант)
                 RomanNumber                   // Актуальне значення (те, що вирахуване)
                 .Parse("I")                   //
                 .Value                        //
                 , "1 == I");                  // Повідомлення, що з'явиться при провалі тесту
            foreach (var pair in parseTests)
            {
                Assert.AreEqual(
                pair.Value,
                 RomanNumber
                 .Parse(pair.Key)
                 .Value
                 , $"{pair.Value} == {pair.Key}");
            }
           
        }
    }
}
/* Основу модульних тестів складають твердження (Asserts).
 * У твердженні фігурують два значення: те, що очікується, та
 * те, що одержується.
 * Більшість тестів перевіряють рівність (об'єктну AreSame чи контентну AreEqual),
 * або у скороченій формі(IsTrue, IsNotNull, ....)
 */